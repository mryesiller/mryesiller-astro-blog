---
import { useTranslations } from '../i18n/utils';

interface Props {
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang as any);
---

<div class="search-container">
  <div class="relative w-full md:w-64">
    <input 
      type="search" 
      id="search-input"
      placeholder={t('search.placeholder')}
      class="w-full pl-10 pr-4 py-2 border rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200"
    />
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-2.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  </div>
  
  <div id="search-results" class="hidden mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg max-h-80 overflow-y-auto absolute z-50 w-full md:w-64"></div>
</div>

<script>
  // Search functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');
    
    // Implement client-side search
    if (searchInput && searchResults) {
      // Store all posts from the page
      // This gets all blog post titles and links from the current page
      const collectPosts = () => {
        const posts: { title: string; url: string }[] = [];
        const postElements = document.querySelectorAll('article h2 a, article h3 a');
        
        postElements.forEach(el => {
          const title = el.textContent?.trim();
          const url = el.getAttribute('href');
          if (title && url) {
            posts.push({ title, url });
          }
        });
        
        return posts;
      };
      
      const posts = collectPosts();
      
      // Search function
      const performSearch = (query: string) => {
        if (query.length < 2) {
          searchResults.classList.add('hidden');
          return;
        }
        
        const results = posts.filter(post => 
          post.title.toLowerCase().includes(query.toLowerCase())
        );
        
        if (results.length === 0) {
          searchResults.innerHTML = '<div class="p-4 text-gray-500 dark:text-gray-400">No results found</div>';
        } else {
          searchResults.innerHTML = results
            .map(post => `
              <a href="${post.url}" class="block p-3 hover:bg-gray-100 dark:hover:bg-gray-700">
                ${post.title}
              </a>
            `)
            .join('');
        }
        
        searchResults.classList.remove('hidden');
      };
      
      // Event listeners
      searchInput.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value;
        performSearch(query);
      });
      
      // Close results when clicking elsewhere
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target as Node) && !searchResults.contains(e.target as Node)) {
          searchResults.classList.add('hidden');
        }
      });
      
      // Re-open results if input is focused and has content
      searchInput.addEventListener('focus', () => {
        if (searchInput.value.length >= 2) {
          performSearch(searchInput.value);
        }
      });
    }
  });
</script>

<style>
  .search-container {
    position: relative;
  }
</style> 